package net.evrem.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.evrem.service.model.UserDetail;
import net.evrem.service.model.UserDetailModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserDetail service. Represents a row in the &quot;user_detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.evrem.service.model.UserDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserDetailImpl}.
 * </p>
 *
 * @author Zdenek Vecek
 * @see UserDetailImpl
 * @see net.evrem.service.model.UserDetail
 * @see net.evrem.service.model.UserDetailModel
 * @generated
 */
public class UserDetailModelImpl extends BaseModelImpl<UserDetail>
    implements UserDetailModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a user detail model instance should use the {@link net.evrem.service.model.UserDetail} interface instead.
     */
    public static final String TABLE_NAME = "user_detail";
    public static final Object[][] TABLE_COLUMNS = {
            { "userdetail_id", Types.BIGINT },
            { "user_id", Types.BIGINT },
            { "timezone_id", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table user_detail (userdetail_id LONG not null primary key,user_id LONG,timezone_id VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table user_detail";
    public static final String ORDER_BY_JPQL = " ORDER BY userDetail.userDetailId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY user_detail.userdetail_id ASC";
    public static final String DATA_SOURCE = "evremDataSource";
    public static final String SESSION_FACTORY = "evremSessionFactory";
    public static final String TX_MANAGER = "evremTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.evrem.service.model.UserDetail"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.evrem.service.model.UserDetail"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.evrem.service.model.UserDetail"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static long USERDETAILID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.evrem.service.model.UserDetail"));
    private static ClassLoader _classLoader = UserDetail.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            UserDetail.class
        };
    private long _userDetailId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private String _timeZoneId;
    private long _columnBitmask;
    private UserDetail _escapedModel;

    public UserDetailModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _userDetailId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setUserDetailId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _userDetailId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return UserDetail.class;
    }

    @Override
    public String getModelClassName() {
        return UserDetail.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("userDetailId", getUserDetailId());
        attributes.put("userId", getUserId());
        attributes.put("timeZoneId", getTimeZoneId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long userDetailId = (Long) attributes.get("userDetailId");

        if (userDetailId != null) {
            setUserDetailId(userDetailId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String timeZoneId = (String) attributes.get("timeZoneId");

        if (timeZoneId != null) {
            setTimeZoneId(timeZoneId);
        }
    }

    @Override
    public long getUserDetailId() {
        return _userDetailId;
    }

    @Override
    public void setUserDetailId(long userDetailId) {
        _userDetailId = userDetailId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @Override
    public String getTimeZoneId() {
        if (_timeZoneId == null) {
            return StringPool.BLANK;
        } else {
            return _timeZoneId;
        }
    }

    @Override
    public void setTimeZoneId(String timeZoneId) {
        _timeZoneId = timeZoneId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            UserDetail.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public UserDetail toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (UserDetail) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        UserDetailImpl userDetailImpl = new UserDetailImpl();

        userDetailImpl.setUserDetailId(getUserDetailId());
        userDetailImpl.setUserId(getUserId());
        userDetailImpl.setTimeZoneId(getTimeZoneId());

        userDetailImpl.resetOriginalValues();

        return userDetailImpl;
    }

    @Override
    public int compareTo(UserDetail userDetail) {
        long primaryKey = userDetail.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof UserDetail)) {
            return false;
        }

        UserDetail userDetail = (UserDetail) obj;

        long primaryKey = userDetail.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        UserDetailModelImpl userDetailModelImpl = this;

        userDetailModelImpl._originalUserId = userDetailModelImpl._userId;

        userDetailModelImpl._setOriginalUserId = false;

        userDetailModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<UserDetail> toCacheModel() {
        UserDetailCacheModel userDetailCacheModel = new UserDetailCacheModel();

        userDetailCacheModel.userDetailId = getUserDetailId();

        userDetailCacheModel.userId = getUserId();

        userDetailCacheModel.timeZoneId = getTimeZoneId();

        String timeZoneId = userDetailCacheModel.timeZoneId;

        if ((timeZoneId != null) && (timeZoneId.length() == 0)) {
            userDetailCacheModel.timeZoneId = null;
        }

        return userDetailCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{userDetailId=");
        sb.append(getUserDetailId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", timeZoneId=");
        sb.append(getTimeZoneId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("net.evrem.service.model.UserDetail");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>userDetailId</column-name><column-value><![CDATA[");
        sb.append(getUserDetailId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>timeZoneId</column-name><column-value><![CDATA[");
        sb.append(getTimeZoneId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
