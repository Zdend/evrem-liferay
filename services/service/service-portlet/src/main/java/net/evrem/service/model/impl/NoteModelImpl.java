package net.evrem.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.evrem.service.model.Note;
import net.evrem.service.model.NoteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Note service. Represents a row in the &quot;note&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.evrem.service.model.NoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NoteImpl}.
 * </p>
 *
 * @author Zdenek Vecek
 * @see NoteImpl
 * @see net.evrem.service.model.Note
 * @see net.evrem.service.model.NoteModel
 * @generated
 */
public class NoteModelImpl extends BaseModelImpl<Note> implements NoteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a note model instance should use the {@link net.evrem.service.model.Note} interface instead.
     */
    public static final String TABLE_NAME = "note";
    public static final Object[][] TABLE_COLUMNS = {
            { "note_id", Types.BIGINT },
            { "user_id", Types.BIGINT },
            { "has_check", Types.BOOLEAN },
            { "has_time", Types.BOOLEAN },
            { "has_reminder", Types.BOOLEAN },
            { "has_todo", Types.BOOLEAN },
            { "has_repeat", Types.BOOLEAN },
            { "has_color", Types.BOOLEAN },
            { "has_wall", Types.BOOLEAN },
            { "text", Types.VARCHAR },
            { "is_done", Types.BOOLEAN },
            { "event_time", Types.TIMESTAMP },
            { "period", Types.VARCHAR },
            { "color", Types.VARCHAR },
            { "created_date", Types.TIMESTAMP },
            { "modified_date", Types.TIMESTAMP },
            { "is_deleted", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table note (note_id LONG not null primary key,user_id LONG,has_check BOOLEAN,has_time BOOLEAN,has_reminder BOOLEAN,has_todo BOOLEAN,has_repeat BOOLEAN,has_color BOOLEAN,has_wall BOOLEAN,text STRING null,is_done BOOLEAN,event_time DATE null,period VARCHAR(75) null,color VARCHAR(75) null,created_date DATE null,modified_date DATE null,is_deleted BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table note";
    public static final String ORDER_BY_JPQL = " ORDER BY note.noteId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY note.note_id ASC";
    public static final String DATA_SOURCE = "evremDataSource";
    public static final String SESSION_FACTORY = "evremSessionFactory";
    public static final String TX_MANAGER = "evremTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.evrem.service.model.Note"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.evrem.service.model.Note"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.evrem.service.model.Note"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static long NOTEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.evrem.service.model.Note"));
    private static ClassLoader _classLoader = Note.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Note.class };
    private long _noteId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private boolean _hasCheck;
    private boolean _hasTime;
    private boolean _hasReminder;
    private boolean _hasTodo;
    private boolean _hasRepeat;
    private boolean _hasColor;
    private boolean _hasWall;
    private String _text;
    private boolean _isDone;
    private Date _eventTime;
    private String _period;
    private String _color;
    private Date _createdDate;
    private Date _modifiedDate;
    private boolean _isDeleted;
    private long _columnBitmask;
    private Note _escapedModel;

    public NoteModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _noteId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setNoteId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _noteId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Note.class;
    }

    @Override
    public String getModelClassName() {
        return Note.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("noteId", getNoteId());
        attributes.put("userId", getUserId());
        attributes.put("hasCheck", getHasCheck());
        attributes.put("hasTime", getHasTime());
        attributes.put("hasReminder", getHasReminder());
        attributes.put("hasTodo", getHasTodo());
        attributes.put("hasRepeat", getHasRepeat());
        attributes.put("hasColor", getHasColor());
        attributes.put("hasWall", getHasWall());
        attributes.put("text", getText());
        attributes.put("isDone", getIsDone());
        attributes.put("eventTime", getEventTime());
        attributes.put("period", getPeriod());
        attributes.put("color", getColor());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("isDeleted", getIsDeleted());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long noteId = (Long) attributes.get("noteId");

        if (noteId != null) {
            setNoteId(noteId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Boolean hasCheck = (Boolean) attributes.get("hasCheck");

        if (hasCheck != null) {
            setHasCheck(hasCheck);
        }

        Boolean hasTime = (Boolean) attributes.get("hasTime");

        if (hasTime != null) {
            setHasTime(hasTime);
        }

        Boolean hasReminder = (Boolean) attributes.get("hasReminder");

        if (hasReminder != null) {
            setHasReminder(hasReminder);
        }

        Boolean hasTodo = (Boolean) attributes.get("hasTodo");

        if (hasTodo != null) {
            setHasTodo(hasTodo);
        }

        Boolean hasRepeat = (Boolean) attributes.get("hasRepeat");

        if (hasRepeat != null) {
            setHasRepeat(hasRepeat);
        }

        Boolean hasColor = (Boolean) attributes.get("hasColor");

        if (hasColor != null) {
            setHasColor(hasColor);
        }

        Boolean hasWall = (Boolean) attributes.get("hasWall");

        if (hasWall != null) {
            setHasWall(hasWall);
        }

        String text = (String) attributes.get("text");

        if (text != null) {
            setText(text);
        }

        Boolean isDone = (Boolean) attributes.get("isDone");

        if (isDone != null) {
            setIsDone(isDone);
        }

        Date eventTime = (Date) attributes.get("eventTime");

        if (eventTime != null) {
            setEventTime(eventTime);
        }

        String period = (String) attributes.get("period");

        if (period != null) {
            setPeriod(period);
        }

        String color = (String) attributes.get("color");

        if (color != null) {
            setColor(color);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Boolean isDeleted = (Boolean) attributes.get("isDeleted");

        if (isDeleted != null) {
            setIsDeleted(isDeleted);
        }
    }

    @Override
    public long getNoteId() {
        return _noteId;
    }

    @Override
    public void setNoteId(long noteId) {
        _columnBitmask = -1L;

        _noteId = noteId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @Override
    public boolean getHasCheck() {
        return _hasCheck;
    }

    @Override
    public boolean isHasCheck() {
        return _hasCheck;
    }

    @Override
    public void setHasCheck(boolean hasCheck) {
        _hasCheck = hasCheck;
    }

    @Override
    public boolean getHasTime() {
        return _hasTime;
    }

    @Override
    public boolean isHasTime() {
        return _hasTime;
    }

    @Override
    public void setHasTime(boolean hasTime) {
        _hasTime = hasTime;
    }

    @Override
    public boolean getHasReminder() {
        return _hasReminder;
    }

    @Override
    public boolean isHasReminder() {
        return _hasReminder;
    }

    @Override
    public void setHasReminder(boolean hasReminder) {
        _hasReminder = hasReminder;
    }

    @Override
    public boolean getHasTodo() {
        return _hasTodo;
    }

    @Override
    public boolean isHasTodo() {
        return _hasTodo;
    }

    @Override
    public void setHasTodo(boolean hasTodo) {
        _hasTodo = hasTodo;
    }

    @Override
    public boolean getHasRepeat() {
        return _hasRepeat;
    }

    @Override
    public boolean isHasRepeat() {
        return _hasRepeat;
    }

    @Override
    public void setHasRepeat(boolean hasRepeat) {
        _hasRepeat = hasRepeat;
    }

    @Override
    public boolean getHasColor() {
        return _hasColor;
    }

    @Override
    public boolean isHasColor() {
        return _hasColor;
    }

    @Override
    public void setHasColor(boolean hasColor) {
        _hasColor = hasColor;
    }

    @Override
    public boolean getHasWall() {
        return _hasWall;
    }

    @Override
    public boolean isHasWall() {
        return _hasWall;
    }

    @Override
    public void setHasWall(boolean hasWall) {
        _hasWall = hasWall;
    }

    @Override
    public String getText() {
        if (_text == null) {
            return StringPool.BLANK;
        } else {
            return _text;
        }
    }

    @Override
    public void setText(String text) {
        _text = text;
    }

    @Override
    public boolean getIsDone() {
        return _isDone;
    }

    @Override
    public boolean isIsDone() {
        return _isDone;
    }

    @Override
    public void setIsDone(boolean isDone) {
        _isDone = isDone;
    }

    @Override
    public Date getEventTime() {
        return _eventTime;
    }

    @Override
    public void setEventTime(Date eventTime) {
        _eventTime = eventTime;
    }

    @Override
    public String getPeriod() {
        if (_period == null) {
            return StringPool.BLANK;
        } else {
            return _period;
        }
    }

    @Override
    public void setPeriod(String period) {
        _period = period;
    }

    @Override
    public String getColor() {
        if (_color == null) {
            return StringPool.BLANK;
        } else {
            return _color;
        }
    }

    @Override
    public void setColor(String color) {
        _color = color;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public boolean getIsDeleted() {
        return _isDeleted;
    }

    @Override
    public boolean isIsDeleted() {
        return _isDeleted;
    }

    @Override
    public void setIsDeleted(boolean isDeleted) {
        _isDeleted = isDeleted;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Note.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Note toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Note) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NoteImpl noteImpl = new NoteImpl();

        noteImpl.setNoteId(getNoteId());
        noteImpl.setUserId(getUserId());
        noteImpl.setHasCheck(getHasCheck());
        noteImpl.setHasTime(getHasTime());
        noteImpl.setHasReminder(getHasReminder());
        noteImpl.setHasTodo(getHasTodo());
        noteImpl.setHasRepeat(getHasRepeat());
        noteImpl.setHasColor(getHasColor());
        noteImpl.setHasWall(getHasWall());
        noteImpl.setText(getText());
        noteImpl.setIsDone(getIsDone());
        noteImpl.setEventTime(getEventTime());
        noteImpl.setPeriod(getPeriod());
        noteImpl.setColor(getColor());
        noteImpl.setCreatedDate(getCreatedDate());
        noteImpl.setModifiedDate(getModifiedDate());
        noteImpl.setIsDeleted(getIsDeleted());

        noteImpl.resetOriginalValues();

        return noteImpl;
    }

    @Override
    public int compareTo(Note note) {
        int value = 0;

        if (getNoteId() < note.getNoteId()) {
            value = -1;
        } else if (getNoteId() > note.getNoteId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Note)) {
            return false;
        }

        Note note = (Note) obj;

        long primaryKey = note.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        NoteModelImpl noteModelImpl = this;

        noteModelImpl._originalUserId = noteModelImpl._userId;

        noteModelImpl._setOriginalUserId = false;

        noteModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Note> toCacheModel() {
        NoteCacheModel noteCacheModel = new NoteCacheModel();

        noteCacheModel.noteId = getNoteId();

        noteCacheModel.userId = getUserId();

        noteCacheModel.hasCheck = getHasCheck();

        noteCacheModel.hasTime = getHasTime();

        noteCacheModel.hasReminder = getHasReminder();

        noteCacheModel.hasTodo = getHasTodo();

        noteCacheModel.hasRepeat = getHasRepeat();

        noteCacheModel.hasColor = getHasColor();

        noteCacheModel.hasWall = getHasWall();

        noteCacheModel.text = getText();

        String text = noteCacheModel.text;

        if ((text != null) && (text.length() == 0)) {
            noteCacheModel.text = null;
        }

        noteCacheModel.isDone = getIsDone();

        Date eventTime = getEventTime();

        if (eventTime != null) {
            noteCacheModel.eventTime = eventTime.getTime();
        } else {
            noteCacheModel.eventTime = Long.MIN_VALUE;
        }

        noteCacheModel.period = getPeriod();

        String period = noteCacheModel.period;

        if ((period != null) && (period.length() == 0)) {
            noteCacheModel.period = null;
        }

        noteCacheModel.color = getColor();

        String color = noteCacheModel.color;

        if ((color != null) && (color.length() == 0)) {
            noteCacheModel.color = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            noteCacheModel.createdDate = createdDate.getTime();
        } else {
            noteCacheModel.createdDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            noteCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            noteCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        noteCacheModel.isDeleted = getIsDeleted();

        return noteCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(35);

        sb.append("{noteId=");
        sb.append(getNoteId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", hasCheck=");
        sb.append(getHasCheck());
        sb.append(", hasTime=");
        sb.append(getHasTime());
        sb.append(", hasReminder=");
        sb.append(getHasReminder());
        sb.append(", hasTodo=");
        sb.append(getHasTodo());
        sb.append(", hasRepeat=");
        sb.append(getHasRepeat());
        sb.append(", hasColor=");
        sb.append(getHasColor());
        sb.append(", hasWall=");
        sb.append(getHasWall());
        sb.append(", text=");
        sb.append(getText());
        sb.append(", isDone=");
        sb.append(getIsDone());
        sb.append(", eventTime=");
        sb.append(getEventTime());
        sb.append(", period=");
        sb.append(getPeriod());
        sb.append(", color=");
        sb.append(getColor());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", isDeleted=");
        sb.append(getIsDeleted());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(55);

        sb.append("<model><model-name>");
        sb.append("net.evrem.service.model.Note");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>noteId</column-name><column-value><![CDATA[");
        sb.append(getNoteId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hasCheck</column-name><column-value><![CDATA[");
        sb.append(getHasCheck());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hasTime</column-name><column-value><![CDATA[");
        sb.append(getHasTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hasReminder</column-name><column-value><![CDATA[");
        sb.append(getHasReminder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hasTodo</column-name><column-value><![CDATA[");
        sb.append(getHasTodo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hasRepeat</column-name><column-value><![CDATA[");
        sb.append(getHasRepeat());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hasColor</column-name><column-value><![CDATA[");
        sb.append(getHasColor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hasWall</column-name><column-value><![CDATA[");
        sb.append(getHasWall());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>text</column-name><column-value><![CDATA[");
        sb.append(getText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isDone</column-name><column-value><![CDATA[");
        sb.append(getIsDone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eventTime</column-name><column-value><![CDATA[");
        sb.append(getEventTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>period</column-name><column-value><![CDATA[");
        sb.append(getPeriod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>color</column-name><column-value><![CDATA[");
        sb.append(getColor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isDeleted</column-name><column-value><![CDATA[");
        sb.append(getIsDeleted());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
