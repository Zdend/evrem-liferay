package net.evrem.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.evrem.service.model.TodoNote;
import net.evrem.service.model.TodoNoteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TodoNote service. Represents a row in the &quot;todo_note&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.evrem.service.model.TodoNoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TodoNoteImpl}.
 * </p>
 *
 * @author Zdenek Vecek
 * @see TodoNoteImpl
 * @see net.evrem.service.model.TodoNote
 * @see net.evrem.service.model.TodoNoteModel
 * @generated
 */
public class TodoNoteModelImpl extends BaseModelImpl<TodoNote>
    implements TodoNoteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a todo note model instance should use the {@link net.evrem.service.model.TodoNote} interface instead.
     */
    public static final String TABLE_NAME = "todo_note";
    public static final Object[][] TABLE_COLUMNS = {
            { "todonote_id", Types.BIGINT },
            { "note_id", Types.BIGINT },
            { "is_done", Types.BOOLEAN },
            { "text", Types.VARCHAR },
            { "sort_no", Types.INTEGER },
            { "modified_date", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table todo_note (todonote_id LONG not null primary key,note_id LONG,is_done BOOLEAN,text VARCHAR(75) null,sort_no INTEGER,modified_date DATE null)";
    public static final String TABLE_SQL_DROP = "drop table todo_note";
    public static final String ORDER_BY_JPQL = " ORDER BY todoNote.todoNoteId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY todo_note.todonote_id ASC";
    public static final String DATA_SOURCE = "evremDataSource";
    public static final String SESSION_FACTORY = "evremSessionFactory";
    public static final String TX_MANAGER = "evremTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.evrem.service.model.TodoNote"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.evrem.service.model.TodoNote"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.evrem.service.model.TodoNote"),
            true);
    public static long NOTEID_COLUMN_BITMASK = 1L;
    public static long SORTNO_COLUMN_BITMASK = 2L;
    public static long TODONOTEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.evrem.service.model.TodoNote"));
    private static ClassLoader _classLoader = TodoNote.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            TodoNote.class
        };
    private long _todoNoteId;
    private long _noteId;
    private long _originalNoteId;
    private boolean _setOriginalNoteId;
    private boolean _isDone;
    private String _text;
    private int _sortNo;
    private int _originalSortNo;
    private boolean _setOriginalSortNo;
    private Date _modifiedDate;
    private long _columnBitmask;
    private TodoNote _escapedModel;

    public TodoNoteModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _todoNoteId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTodoNoteId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _todoNoteId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return TodoNote.class;
    }

    @Override
    public String getModelClassName() {
        return TodoNote.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("todoNoteId", getTodoNoteId());
        attributes.put("noteId", getNoteId());
        attributes.put("isDone", getIsDone());
        attributes.put("text", getText());
        attributes.put("sortNo", getSortNo());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long todoNoteId = (Long) attributes.get("todoNoteId");

        if (todoNoteId != null) {
            setTodoNoteId(todoNoteId);
        }

        Long noteId = (Long) attributes.get("noteId");

        if (noteId != null) {
            setNoteId(noteId);
        }

        Boolean isDone = (Boolean) attributes.get("isDone");

        if (isDone != null) {
            setIsDone(isDone);
        }

        String text = (String) attributes.get("text");

        if (text != null) {
            setText(text);
        }

        Integer sortNo = (Integer) attributes.get("sortNo");

        if (sortNo != null) {
            setSortNo(sortNo);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public long getTodoNoteId() {
        return _todoNoteId;
    }

    @Override
    public void setTodoNoteId(long todoNoteId) {
        _todoNoteId = todoNoteId;
    }

    @Override
    public long getNoteId() {
        return _noteId;
    }

    @Override
    public void setNoteId(long noteId) {
        _columnBitmask |= NOTEID_COLUMN_BITMASK;

        if (!_setOriginalNoteId) {
            _setOriginalNoteId = true;

            _originalNoteId = _noteId;
        }

        _noteId = noteId;
    }

    public long getOriginalNoteId() {
        return _originalNoteId;
    }

    @Override
    public boolean getIsDone() {
        return _isDone;
    }

    @Override
    public boolean isIsDone() {
        return _isDone;
    }

    @Override
    public void setIsDone(boolean isDone) {
        _isDone = isDone;
    }

    @Override
    public String getText() {
        if (_text == null) {
            return StringPool.BLANK;
        } else {
            return _text;
        }
    }

    @Override
    public void setText(String text) {
        _text = text;
    }

    @Override
    public int getSortNo() {
        return _sortNo;
    }

    @Override
    public void setSortNo(int sortNo) {
        _columnBitmask |= SORTNO_COLUMN_BITMASK;

        if (!_setOriginalSortNo) {
            _setOriginalSortNo = true;

            _originalSortNo = _sortNo;
        }

        _sortNo = sortNo;
    }

    public int getOriginalSortNo() {
        return _originalSortNo;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            TodoNote.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public TodoNote toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (TodoNote) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TodoNoteImpl todoNoteImpl = new TodoNoteImpl();

        todoNoteImpl.setTodoNoteId(getTodoNoteId());
        todoNoteImpl.setNoteId(getNoteId());
        todoNoteImpl.setIsDone(getIsDone());
        todoNoteImpl.setText(getText());
        todoNoteImpl.setSortNo(getSortNo());
        todoNoteImpl.setModifiedDate(getModifiedDate());

        todoNoteImpl.resetOriginalValues();

        return todoNoteImpl;
    }

    @Override
    public int compareTo(TodoNote todoNote) {
        long primaryKey = todoNote.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof TodoNote)) {
            return false;
        }

        TodoNote todoNote = (TodoNote) obj;

        long primaryKey = todoNote.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TodoNoteModelImpl todoNoteModelImpl = this;

        todoNoteModelImpl._originalNoteId = todoNoteModelImpl._noteId;

        todoNoteModelImpl._setOriginalNoteId = false;

        todoNoteModelImpl._originalSortNo = todoNoteModelImpl._sortNo;

        todoNoteModelImpl._setOriginalSortNo = false;

        todoNoteModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<TodoNote> toCacheModel() {
        TodoNoteCacheModel todoNoteCacheModel = new TodoNoteCacheModel();

        todoNoteCacheModel.todoNoteId = getTodoNoteId();

        todoNoteCacheModel.noteId = getNoteId();

        todoNoteCacheModel.isDone = getIsDone();

        todoNoteCacheModel.text = getText();

        String text = todoNoteCacheModel.text;

        if ((text != null) && (text.length() == 0)) {
            todoNoteCacheModel.text = null;
        }

        todoNoteCacheModel.sortNo = getSortNo();

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            todoNoteCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            todoNoteCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return todoNoteCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{todoNoteId=");
        sb.append(getTodoNoteId());
        sb.append(", noteId=");
        sb.append(getNoteId());
        sb.append(", isDone=");
        sb.append(getIsDone());
        sb.append(", text=");
        sb.append(getText());
        sb.append(", sortNo=");
        sb.append(getSortNo());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("net.evrem.service.model.TodoNote");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>todoNoteId</column-name><column-value><![CDATA[");
        sb.append(getTodoNoteId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>noteId</column-name><column-value><![CDATA[");
        sb.append(getNoteId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isDone</column-name><column-value><![CDATA[");
        sb.append(getIsDone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>text</column-name><column-value><![CDATA[");
        sb.append(getText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sortNo</column-name><column-value><![CDATA[");
        sb.append(getSortNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
