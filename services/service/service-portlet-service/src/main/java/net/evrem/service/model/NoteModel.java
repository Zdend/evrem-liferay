package net.evrem.service.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Note service. Represents a row in the &quot;note&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link net.evrem.service.model.impl.NoteModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link net.evrem.service.model.impl.NoteImpl}.
 * </p>
 *
 * @author Zdenek Vecek
 * @see Note
 * @see net.evrem.service.model.impl.NoteImpl
 * @see net.evrem.service.model.impl.NoteModelImpl
 * @generated
 */
public interface NoteModel extends BaseModel<Note> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a note model instance should use the {@link Note} interface instead.
     */

    /**
     * Returns the primary key of this note.
     *
     * @return the primary key of this note
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this note.
     *
     * @param primaryKey the primary key of this note
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the note ID of this note.
     *
     * @return the note ID of this note
     */
    public long getNoteId();

    /**
     * Sets the note ID of this note.
     *
     * @param noteId the note ID of this note
     */
    public void setNoteId(long noteId);

    /**
     * Returns the user ID of this note.
     *
     * @return the user ID of this note
     */
    public long getUserId();

    /**
     * Sets the user ID of this note.
     *
     * @param userId the user ID of this note
     */
    public void setUserId(long userId);

    /**
     * Returns the user uuid of this note.
     *
     * @return the user uuid of this note
     * @throws SystemException if a system exception occurred
     */
    public String getUserUuid() throws SystemException;

    /**
     * Sets the user uuid of this note.
     *
     * @param userUuid the user uuid of this note
     */
    public void setUserUuid(String userUuid);

    /**
     * Returns the has check of this note.
     *
     * @return the has check of this note
     */
    public boolean getHasCheck();

    /**
     * Returns <code>true</code> if this note is has check.
     *
     * @return <code>true</code> if this note is has check; <code>false</code> otherwise
     */
    public boolean isHasCheck();

    /**
     * Sets whether this note is has check.
     *
     * @param hasCheck the has check of this note
     */
    public void setHasCheck(boolean hasCheck);

    /**
     * Returns the has time of this note.
     *
     * @return the has time of this note
     */
    public boolean getHasTime();

    /**
     * Returns <code>true</code> if this note is has time.
     *
     * @return <code>true</code> if this note is has time; <code>false</code> otherwise
     */
    public boolean isHasTime();

    /**
     * Sets whether this note is has time.
     *
     * @param hasTime the has time of this note
     */
    public void setHasTime(boolean hasTime);

    /**
     * Returns the has reminder of this note.
     *
     * @return the has reminder of this note
     */
    public boolean getHasReminder();

    /**
     * Returns <code>true</code> if this note is has reminder.
     *
     * @return <code>true</code> if this note is has reminder; <code>false</code> otherwise
     */
    public boolean isHasReminder();

    /**
     * Sets whether this note is has reminder.
     *
     * @param hasReminder the has reminder of this note
     */
    public void setHasReminder(boolean hasReminder);

    /**
     * Returns the has todo of this note.
     *
     * @return the has todo of this note
     */
    public boolean getHasTodo();

    /**
     * Returns <code>true</code> if this note is has todo.
     *
     * @return <code>true</code> if this note is has todo; <code>false</code> otherwise
     */
    public boolean isHasTodo();

    /**
     * Sets whether this note is has todo.
     *
     * @param hasTodo the has todo of this note
     */
    public void setHasTodo(boolean hasTodo);

    /**
     * Returns the has repeat of this note.
     *
     * @return the has repeat of this note
     */
    public boolean getHasRepeat();

    /**
     * Returns <code>true</code> if this note is has repeat.
     *
     * @return <code>true</code> if this note is has repeat; <code>false</code> otherwise
     */
    public boolean isHasRepeat();

    /**
     * Sets whether this note is has repeat.
     *
     * @param hasRepeat the has repeat of this note
     */
    public void setHasRepeat(boolean hasRepeat);

    /**
     * Returns the has color of this note.
     *
     * @return the has color of this note
     */
    public boolean getHasColor();

    /**
     * Returns <code>true</code> if this note is has color.
     *
     * @return <code>true</code> if this note is has color; <code>false</code> otherwise
     */
    public boolean isHasColor();

    /**
     * Sets whether this note is has color.
     *
     * @param hasColor the has color of this note
     */
    public void setHasColor(boolean hasColor);

    /**
     * Returns the has wall of this note.
     *
     * @return the has wall of this note
     */
    public boolean getHasWall();

    /**
     * Returns <code>true</code> if this note is has wall.
     *
     * @return <code>true</code> if this note is has wall; <code>false</code> otherwise
     */
    public boolean isHasWall();

    /**
     * Sets whether this note is has wall.
     *
     * @param hasWall the has wall of this note
     */
    public void setHasWall(boolean hasWall);

    /**
     * Returns the text of this note.
     *
     * @return the text of this note
     */
    @AutoEscape
    public String getText();

    /**
     * Sets the text of this note.
     *
     * @param text the text of this note
     */
    public void setText(String text);

    /**
     * Returns the is done of this note.
     *
     * @return the is done of this note
     */
    public boolean getIsDone();

    /**
     * Returns <code>true</code> if this note is is done.
     *
     * @return <code>true</code> if this note is is done; <code>false</code> otherwise
     */
    public boolean isIsDone();

    /**
     * Sets whether this note is is done.
     *
     * @param isDone the is done of this note
     */
    public void setIsDone(boolean isDone);

    /**
     * Returns the event time of this note.
     *
     * @return the event time of this note
     */
    public Date getEventTime();

    /**
     * Sets the event time of this note.
     *
     * @param eventTime the event time of this note
     */
    public void setEventTime(Date eventTime);

    /**
     * Returns the period of this note.
     *
     * @return the period of this note
     */
    @AutoEscape
    public String getPeriod();

    /**
     * Sets the period of this note.
     *
     * @param period the period of this note
     */
    public void setPeriod(String period);

    /**
     * Returns the color of this note.
     *
     * @return the color of this note
     */
    @AutoEscape
    public String getColor();

    /**
     * Sets the color of this note.
     *
     * @param color the color of this note
     */
    public void setColor(String color);

    /**
     * Returns the created date of this note.
     *
     * @return the created date of this note
     */
    public Date getCreatedDate();

    /**
     * Sets the created date of this note.
     *
     * @param createdDate the created date of this note
     */
    public void setCreatedDate(Date createdDate);

    /**
     * Returns the modified date of this note.
     *
     * @return the modified date of this note
     */
    public Date getModifiedDate();

    /**
     * Sets the modified date of this note.
     *
     * @param modifiedDate the modified date of this note
     */
    public void setModifiedDate(Date modifiedDate);

    /**
     * Returns the is deleted of this note.
     *
     * @return the is deleted of this note
     */
    public boolean getIsDeleted();

    /**
     * Returns <code>true</code> if this note is is deleted.
     *
     * @return <code>true</code> if this note is is deleted; <code>false</code> otherwise
     */
    public boolean isIsDeleted();

    /**
     * Sets whether this note is is deleted.
     *
     * @param isDeleted the is deleted of this note
     */
    public void setIsDeleted(boolean isDeleted);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(Note note);

    @Override
    public int hashCode();

    @Override
    public CacheModel<Note> toCacheModel();

    @Override
    public Note toEscapedModel();

    @Override
    public Note toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
